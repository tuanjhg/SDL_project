#include<iostream>
#include<SDL.h>
#include<windows.h>
using namespace std;
const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;
const string WINDOW_TITLE = "Chess";
void drawboard(SDL_Renderer* renderer);
void initSDL(SDL_Window* &window, SDL_Renderer* &renderer);
void quitSDL(SDL_Window* window, SDL_Renderer* renderer);
void logSDLError(std::ostream& os,const std::string &msg, bool fatal);
void waitUntilKeyPressed();
void renderTexture(SDL_Texture *tex, SDL_Renderer *renderer, int x, int y, int w, int h);
void renderTexture(SDL_Texture *tex, SDL_Renderer *renderer, int x, int y);
SDL_Texture* loadTexture(const std::string &file, SDL_Renderer *renderer);
int main(int argc, char* argv[])
{
    SDL_Window* window;
SDL_Renderer* renderer;
SDL_Surface* surface;
initSDL(window, renderer);
SDL_RenderClear(renderer);
SDL_Texture *background = loadTexture("quan-co.bmp", renderer);
SDL_Texture *image = loadTexture("OIP-_1_.bmp", renderer);
if (background == nullptr || image == nullptr){
        SDL_DestroyTexture(background);
        SDL_DestroyTexture(image);
        quitSDL(window, renderer);
    }
    renderTexture(background, renderer, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
SDL_RenderPresent(renderer);
waitUntilKeyPressed();
SDL_DestroyTexture(background);
SDL_RenderClear(renderer);
drawboard(renderer);
SDL_Rect filled_rect;
    filled_rect.x = 0;
    filled_rect.y = 0;
    filled_rect.w = 80;
    filled_rect.h = 60;
renderTexture(image, renderer, filled_rect.x, filled_rect.y, filled_rect.w, filled_rect.h);
//SDL_Event event;
//bool quit = false;
//while (!quit)
//{
    //while (SDL_PollEvent(&event))
    //{
        //switch (event.type)
        //{
            //case SDL_QUIT:
                //quit = true;
                //break;
            //case SDL_MOUSEBUTTONDOWN:
                //if (event.button.button == SDL_BUTTON_LEFT)
                //{
                    // Nếu nhấn chuột trái, lưu vị trí của chuột.
                    //int x = event.button.x - filled_rect.w / 2;
                    //int y = event.button.y - filled_rect.h / 2;
                    //filled_rect.x = x;
                    //filled_rect.y = y;
                //}
                //break;
        //}
    //}
//SDL_RenderClear(renderer);
//drawboard(renderer);
//renderTexture(image, renderer, filled_rect.x, filled_rect.y, filled_rect.w, filled_rect.h);
//}  // Xóa màn hình và vẽ lại ảnh._renderTexture
    //int iW, iH;
    //SDL_QueryTexture(image, NULL, NULL, &iW, &iH);
    //int x = iW / 64;
    //int y =  iH /64;
    //renderTexture(image, renderer, x, y);
//initSDL(window, renderer);
//SDL_RenderClear(renderer);
SDL_RenderPresent(renderer);
waitUntilKeyPressed();
quitSDL(window, renderer);
return 0;
}
void waitUntilKeyPressed()
{
SDL_Event e;
while (true) {
 if ( SDL_WaitEvent(&e) != 0 &&(e.type == SDL_KEYDOWN || e.type == SDL_QUIT) )
 return;
 SDL_Delay(100);
}
}
void logSDLError(std::ostream& os,const std::string &msg, bool fatal)
{
os << msg << " Error: " << SDL_GetError() << std::endl;
if (fatal) {
 SDL_Quit();
 exit(1);
}
}
void renderTexture(SDL_Texture *tex, SDL_Renderer *renderer, int x, int y)
{
	SDL_Rect dst;
	dst.x = x;
	dst.y = y;
	SDL_QueryTexture(tex, NULL, NULL, &dst.w, &dst.h);
	SDL_RenderCopy(renderer, tex, NULL, &dst);
}
void renderTexture(SDL_Texture *tex, SDL_Renderer *renderer, int x, int y, int w, int h)
{
	SDL_Rect dst;
	dst.x = x;
	dst.y = y;
    dst.w = w;
    dst.h = h;
	SDL_RenderCopy(renderer, tex, NULL, &dst);
}
SDL_Texture* loadTexture(const std::string &file, SDL_Renderer *renderer)
{
	SDL_Texture *texture = nullptr;
	SDL_Surface *loadedImage = SDL_LoadBMP(file.c_str());
	if (loadedImage != nullptr){
		texture = SDL_CreateTextureFromSurface(renderer, loadedImage);
		SDL_FreeSurface(loadedImage);
		if (texture == nullptr){
			logSDLError(cout, "CreateTextureFromSurface",true);
		}
	}
	else {
		logSDLError(cout, "LoadBMP",true);
	}
	return texture;
}
void initSDL(SDL_Window* &window, SDL_Renderer* &renderer)
{
if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
 logSDLError(std::cout, "SDL_Init", true);
window = SDL_CreateWindow(WINDOW_TITLE.c_str(), SDL_WINDOWPOS_CENTERED,
SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
 if (window == nullptr) logSDLError(std::cout, "CreateWindow", true);
renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED |
SDL_RENDERER_PRESENTVSYNC);
if (renderer == nullptr) logSDLError(std::cout, "CreateRenderer", true);
SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
SDL_RenderSetLogicalSize(renderer, SCREEN_WIDTH, SCREEN_HEIGHT);
}
void quitSDL(SDL_Window* window, SDL_Renderer* renderer)
{
SDL_DestroyRenderer(renderer);
SDL_DestroyWindow(window);
SDL_Quit();
}
void drawboard(SDL_Renderer* renderer){
 SDL_Rect filled_rect;
    filled_rect.x = 0;
    filled_rect.y = 0;
    filled_rect.w = 80;
    filled_rect.h = 60;
for(int i=0;i<8;i++){
    for(int j=0;j<8;j++){
        if((i+j)%2==0){
            SDL_SetRenderDrawColor(renderer,0,0,0,0);
            SDL_RenderFillRect(renderer,&filled_rect);
        }else{
            SDL_SetRenderDrawColor(renderer,255,255,255,255);
            SDL_RenderFillRect(renderer,&filled_rect);
        }
                filled_rect.x+=80;
    }
        filled_rect.y+=60;
        filled_rect.x=0;
    if(i%2==0){
        SDL_SetRenderDrawColor(renderer,0,0,0,0);
            SDL_RenderFillRect(renderer,&filled_rect);
    }
}
}
